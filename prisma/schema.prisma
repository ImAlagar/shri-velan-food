generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  role      UserRole  @default(CUSTOMER)
  avatar    String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addresses Address[]
  contacts  Contact[]
  orders    Order[]
  ratings   Rating[]

  @@map("users")
}

model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  image         String?
  imagePublicId String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]

  @@map("categories")
}

model Product {
  id             String      @id @default(cuid())
  name           String
  description    String
  weight         String?
  isCombo        Boolean     @default(false)
  normalPrice    Float
  offerPrice     Float?
  benefits       String[]
  ingredients    String[]
  stock          Int         @default(0)
  tags           String[]
  status         Boolean     @default(true)
  images         String[]
  categoryId     String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  imagePublicIds String[]
  orderItems     OrderItem[]
  category       Category    @relation(fields: [categoryId], references: [id])
  ratings        Rating[]

  @@map("products")
}

model Rating {
  id         String   @id @default(cuid())
  productId  String
  userId     String
  userName   String
  userEmail  String
  rating     Int
  review     String?
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("ratings")
}

model Contact {
  id        String        @id @default(cuid())
  name      String
  phone     String
  email     String
  message   String
  status    ContactStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String?
  users     User?         @relation(fields: [userId], references: [id])

  @@map("contacts")
}

model Order {
  id            String        @id @default(cuid())
  orderNumber   String        @unique
  userId        String
  name          String
  email         String
  phone         String
  address       String
  pincode       String
  status        OrderStatus   @default(PENDING)
  totalAmount   Float
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orderItems    OrderItem[]
  user          User          @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}
